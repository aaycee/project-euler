/* Akachukwu Obi

Project Euler #2 - Sum of even fibonacci terms

Each new term in the Fibonacci sequence is generated by adding the 
previous two terms. By starting with 1 and 2, 
the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do 
not exceed four million, find the sum of the even-valued terms.

Retrieved 21/July/17 from https://projecteuler.net/problem=2
*/


/* oooooooooooo     MAIN SOLUTION     oooooooooooo */

function evenFibonacciSum(limit) {
    "use strict";
    var a, b, c, sum;
    a = 1;
    b = 1;
    c = a + b;
    sum = 0;
    while (c < limit) {
        sum += c; // only adding c, which are even
        a = b + c; // classic fibonacci algorithm
        b = a + c;
        c = a + b;
    }
    return sum;
}
// test
evenFibonacciSum(4000000);
// --> 4613732

/* oooooooooooo     BUILD UP     oooooooooooo */

// First try: Code to calculate a set of n fibonnaci numbers
var setOfNFibNum = function (n) {
    "use strict";
    var set, count; // initialize variables
    set = [1, 2]; // initiate the first two terms in the fibonacci sequence
    count = 0;
    while (set.length < n) { // set.length < n covers up to n values in the set since the count starts from 0
        set.push(set[count] + set[count + 1]);
        count = count + 1;
    }
    return set;
};
// test
setOfNFibNum(10);
// --> (10)[1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

// Second try: Code to calculate the even sum of a set of n fibonnaci numbers
// could easily be modified to find the regular sum
var sumEvenFibN = function (n) {
    "use strict";
    var set, set2, count, i, set2sum; // initialize variables
    set = [1, 2];
    count = 0;
    set2 = []; // even valued fibonacci set; you could initialize this set with [0] if you encounter problems
    set2sum = 0;
    while (set.length < n) { // set.length < n covers up to n values in the set since the count starts from 0
        set.push(set[count] + set[count + 1]);
        count = count + 1;
    }
    for (i = 0; i < set.length; i = i + 1) { // runs a loop to add the elements of the set generated
        if (set[i] % 2 === 0) {
            set2.push(set[i]);
            set2sum += set[i];
        }
	}

    // console.log(set2);
    // return set2sum;
    return "Sum of set is " + set2sum + ": " + set2;
};
// test
sumEvenFibN(10);
// --> "Sum of set is 44: 2,8,34"

// final code: code to calculate the sum of even fibonacci terms for fibonacci set with numbers less than n

function sumOfEvenFibLessThan(number) {
    'use strict';
    var fib, newFib, evenFib, evenFibSum, count, i;
    fib = [1, 2]; // initiate the first two terms in the fibonacci sequence
    evenFib = [2];
    evenFibSum = 0;
    count = 0;
    
    while (fib[fib.length - 1] < number) { // while the last number of the sequence is less than the number you gave
        newFib = fib[count] + fib[count + 1];
        fib.push(newFib);
        if (newFib % 2 === 0) {
            evenFib.push(newFib);
        }
        count += 1;
    }
    
    // the while loop above gives includes an additional fib number in the set. The code below removes it.
    
	if (fib[fib.length - 1] % 2 === 0) {
        evenFib.pop(); // if last element of fib is even, remove it from evenFib
    }
    fib.pop();
    
    // this sums up the evenFib set
    
    for (i = 0; i < evenFib.length; i += 1) {
        evenFibSum += evenFib[i];
	}
    return evenFibSum;
    // return "Sum of set is " + evenFibSum + ": " + evenFib;
}
// test
sumOfEvenFibLessThan(4000000);
// --> 4613732




// After some googling, I'm once again put to shame by the elegance of JS. Idea by multiple people.

// Idea 1: use classic fibonacci algorithm

function evenFiboSum(limit) {
    "use strict";
    var current, prev, next, sum;
    prev = 1;
    current = 1;
    sum = 0;
    while (current < limit) {
        if (current % 2 === 0) {
            sum += current;
        }
        next = prev + current; // classic fibonacci algorithm
        prev = current; // update prev and current
        current = next;
    }
    return sum;
}
// test
evenFiboSum(4000000);
// --> 4613732


/* Idea 2: Be smarter

it is easy to show that every 3rd fibonacci number is even: 

    1   1   2   3   5   8  13   21  34  55  89  144 ...
    a   b   c   a   b   c   a   b   c   a   b   c

With this, we can develop the algorithm below: (inspired by projecteuler.net)
*/

function eFSum(limit) {
    "use strict";
    var a, b, c, sum;
    a = 1;
    b = 1;
    c = a + b;
    sum = 0;
    while (c < limit) {
        sum += c; // only adding c, which are even
        a = b + c; // classic fibonacci algorithm
        b = a + c;
        c = a + b;
    }
    return sum;
}
// test
eFSum(4000000);
// --> 4613732